on:
  push:
    branches-ignore:
      - "gh-readonly-queue/**"
  pull_request:
  merge_group:
  workflow_dispatch:

name: Osiris CI

jobs:
  container:
    name: Build Container
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .devcontainer
          file: .devcontainer/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/devcontainer:${{ github.ref_name.replace('/', '-') }}

      - name: Set container name as output
        id: set_output
        run: |
          container_name="ghcr.io/${{ github.repository }}/devcontainer:${{ github.ref_name.replace('/', '-') }}"
          echo "container_name=$container_name" >> $GITHUB_OUTPUT

  manifests:
    name: Get Cargo manifests
    runs-on: ubuntu-latest
    needs: container
    container: ${{ needs.container.outputs.container_name }}
    outputs:
      manifests: ${{ steps.find.outputs.manifests }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # This step is required to generate some Cargo.toml files
      - name: Run CMake
        run: cmake -B build

      - name: Find Cargo.toml files
        id: find
        run: |
          files=$(find . \( -path './build*' -o -path '*dep*' -o -path '*verus*' -o -path './target' \) -prune -false -o -name Cargo.toml)
          echo "Found the following manifests:"
          echo "$files"
          json=$(printf '%s\n' $files | jq -R . | jq -s .)
          echo "manifests=$json" >> $GITHUB_OUTPUT

  fmt:
    name: rustfmt check for ${{ matrix.manifest }}
    needs: manifests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        manifest: ${{ fromJson(needs.manifests.outputs.manifests) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      # This step is required to generate some Cargo.toml files
      - name: Run CMake
        run: cmake -B build

      - name: Check formatting
        run: cargo fmt --manifest-path="${{ matrix.manifest }}" -- --check
